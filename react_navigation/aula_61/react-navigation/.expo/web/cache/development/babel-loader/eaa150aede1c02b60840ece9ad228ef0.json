{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\guilherme.michalach\\\\Desktop\\\\entra21-guilherme_michalach\\\\react_navigation\\\\aula_61\\\\react-navigation\\\\screens\\\\DrawerScreens\\\\UseEffectScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nexport function UseEffectScreen() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      contar = _useState2[0],\n      setContar = _useState2[1];\n\n  var contarEm2 = Math.floor(contar / 2);\n  useEffect(function () {\n    console.log(\"Foram \" + contarEm2 * 2 + \" cliques\");\n  }, [contarEm2]);\n\n  var _useState3 = useState('Olá Allan, tudo certo?'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mensagem = _useState4[0],\n      setMensagem = _useState4[1];\n\n  var teste = useEffect(function () {\n    console.log(\"Funfou\");\n    setTimeout(function () {\n      setMensagem('Tamo ferrado');\n    }, 2000);\n  });\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, \"useEffect precisa de 2 argumentos, callback e depend\\xEAncias. Assim, quando o componente funciona, a callback \\xE9 chamada se alguma depend\\xEAncia mudou desde a \\xFAltima vez que o componente rodou. Usado em 3 estados diferentes de vida dos componentes, que s\\xE3o o componentDidMount, o componentDidUpdate e o componentWillUnmount\"), React.createElement(Button, {\n    title: 'Contar',\n    onPress: function onPress() {\n      return setContar(contar + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, mensagem));\n}","map":{"version":3,"sources":["C:/Users/guilherme.michalach/Desktop/entra21-guilherme_michalach/react_navigation/aula_61/react-navigation/screens/DrawerScreens/UseEffectScreen.js"],"names":["React","useState","useEffect","UseEffectScreen","contar","setContar","contarEm2","Math","floor","console","log","mensagem","setMensagem","teste","setTimeout"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAGA,OAAO,SAASC,eAAT,GAA2B;AAC9B,kBAA4BF,QAAQ,CAAC,CAAD,CAApC;AAAA;AAAA,MAAOG,MAAP;AAAA,MAAeC,SAAf;;AACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,MAAM,GAAG,CAApB,CAAlB;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACZO,IAAAA,OAAO,CAACC,GAAR,YAAqBJ,SAAS,GAAG,CAAjC;AACC,GAFI,EAEF,CAACA,SAAD,CAFE,CAAT;;AAKA,mBAAgCL,QAAQ,CAAC,wBAAD,CAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,KAAK,GAAKX,SAAS,CAAC,YAAM;AAC5BO,IAAAA,OAAO,CAACC,GAAR;AAEAI,IAAAA,UAAU,CAAC,YAAM;AACbF,MAAAA,WAAW,CAAC,cAAD,CAAX;AACH,KAFS,EAEP,IAFO,CAAV;AAGC,GANoB,CAAzB;AASA,SACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qVADJ,EAKI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAE,QADX;AAEI,IAAA,OAAO,EAAE;AAAA,aACTP,SAAS,CAACD,MAAM,GAAG,CAAV,CADA;AAAA,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAWI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQO,QAAR,CAXJ,CADJ;AAeH","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ScrollView, Text, Button } from \"react-native\";\r\n\r\nexport function UseEffectScreen() {\r\n    const [contar, setContar] = useState(0);\r\n    const contarEm2 = Math.floor(contar / 2);\r\n\r\n    useEffect(() => {\r\n        console.log(`Foram ${contarEm2 * 2} cliques`)\r\n        }, [contarEm2]\r\n    )\r\n\r\n    const [mensagem, setMensagem] = useState('Olá Allan, tudo certo?');\r\n\r\n    const teste =   useEffect(() => {\r\n        console.log(`Funfou`)\r\n        \r\n        setTimeout(() => {\r\n            setMensagem('Tamo ferrado')\r\n        }, 2000)\r\n        }\r\n    )\r\n\r\n    return (\r\n        <ScrollView>\r\n            <Text>\r\n                useEffect precisa de 2 argumentos, callback e dependências. Assim, quando o componente funciona, a callback é chamada se alguma dependência mudou desde a última vez que o componente rodou.\r\n                Usado em 3 estados diferentes de vida dos componentes, que são o componentDidMount, o componentDidUpdate e o componentWillUnmount\r\n            </Text>\r\n            <Button\r\n                title={'Contar'}\r\n                onPress={() =>\r\n                setContar(contar + 1)\r\n                }\r\n            />\r\n            <Text>{ mensagem }</Text>\r\n        </ScrollView>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}