{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\guilherme.michalach\\\\Desktop\\\\entra21-guilherme_michalach\\\\react_navigation\\\\aula_61\\\\react-navigation\\\\screens\\\\DrawerScreens\\\\UseStateScreen.js\";\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\n\nvar girarDadosRandomicamente = function girarDadosRandomicamente() {\n  return Math.floor(Math.random() * 6) + 1;\n};\n\nexport function UseStateScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      giroDados = _useState2[0],\n      setGiroDados = _useState2[1];\n\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, \"O useState Hook tem como fun\\xE7\\xE3o retornar um valor e uma fun\\xE7\\xE3o para atualizar valores, j\\xE1 que pega o estado do objeto e o modifica durante o render. O primeiro valor retornado nas re-renderiza\\xE7\\xF5es ser\\xE1 o retornado por setState, por ser o mais recente ap\\xF3s os updates\"), React.createElement(Button, {\n    title: \"Girar Dados\",\n    onPress: function onPress() {\n      return setGiroDados([].concat(_toConsumableArray(giroDados), [girarDadosRandomicamente()]));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }), giroDados.map());\n}","map":{"version":3,"sources":["C:/Users/guilherme.michalach/Desktop/entra21-guilherme_michalach/react_navigation/aula_61/react-navigation/screens/DrawerScreens/UseStateScreen.js"],"names":["React","useState","girarDadosRandomicamente","Math","floor","random","UseStateScreen","giroDados","setGiroDados","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAGA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,SAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAAtC;AAAA,CAAjC;;AAEA,OAAO,SAASC,cAAT,GAA0B;AAC7B,kBAAkCL,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOM,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,SACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6SADJ,EAKI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,aADV;AAEI,IAAA,OAAO,EACH;AAAA,aAAMA,YAAY,8BAAKD,SAAL,IAAgBL,wBAAwB,EAAxC,GAAlB;AAAA,KAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAYQK,SAAS,CAACE,GAAV,EAZR,CADJ;AAiBH","sourcesContent":["import React, { useState } from \"react\";\r\nimport { ScrollView, Text, Button } from \"react-native\";\r\n\r\nconst girarDadosRandomicamente = () => Math.floor(Math.random() * 6) + 1\r\n\r\nexport function UseStateScreen() {\r\n    const [giroDados, setGiroDados] = useState([])\r\n\r\n    return (\r\n        <ScrollView>\r\n            <Text>\r\n                O useState Hook tem como função retornar um valor e uma função para atualizar valores, já que pega o estado do objeto e o modifica durante o render.\r\n                O primeiro valor retornado nas re-renderizações será o retornado por setState, por ser o mais recente após os updates\r\n            </Text>\r\n            <Button \r\n                title='Girar Dados'\r\n                onPress={\r\n                    () => setGiroDados([...giroDados, girarDadosRandomicamente()])\r\n                }\r\n            />\r\n            {\r\n                giroDados.map()\r\n            }\r\n        </ScrollView>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}