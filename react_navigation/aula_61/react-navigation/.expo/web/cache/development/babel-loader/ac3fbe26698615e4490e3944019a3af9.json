{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\guilherme.michalach\\\\Desktop\\\\entra21-guilherme_michalach\\\\react_navigation\\\\aula_61\\\\react-navigation\\\\screens\\\\DrawerScreens\\\\UseStateScreen.js\";\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\n\nvar girarDadosRandomicamente = function girarDadosRandomicamente() {\n  return Math.floor(Math.random() * 6) + 1;\n};\n\nexport function UseStateScreen() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      giroDados = _useState2[0],\n      setGiroDados = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      contar = _useState4[0],\n      setContar = _useState4[1];\n\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, \"O useState Hook tem como fun\\xE7\\xE3o retornar um valor e uma fun\\xE7\\xE3o para atualizar valores, j\\xE1 que pega o estado do objeto e o modifica durante o render. O primeiro valor retornado nas re-renderiza\\xE7\\xF5es ser\\xE1 o retornado por setState, por ser o mais recente ap\\xF3s os updates\"), React.createElement(Button, {\n    title: \"Girar Dados\",\n    onPress: function onPress() {\n      return setGiroDados([].concat(_toConsumableArray(giroDados), [girarDadosRandomicamente()]));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }), giroDados.map(function (giroDados, index) {\n    return React.createElement(Text, {\n      style: {\n        textAlign: 'center'\n      },\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }\n    }, giroDados);\n  }), React.createElement(Button, {\n    title: \"Contador\",\n    onPress: function onPress() {\n      return setContar(contar + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, contar));\n}","map":{"version":3,"sources":["C:/Users/guilherme.michalach/Desktop/entra21-guilherme_michalach/react_navigation/aula_61/react-navigation/screens/DrawerScreens/UseStateScreen.js"],"names":["React","useState","girarDadosRandomicamente","Math","floor","random","UseStateScreen","giroDados","setGiroDados","contar","setContar","map","index","textAlign"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAGA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,SAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAAtC;AAAA,CAAjC;;AAEA,OAAO,SAASC,cAAT,GAA0B;AAAA;;AAC7B,kBAAkCL,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOM,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA4BP,QAAQ,CAAC,CAAD,CAApC;AAAA;AAAA,MAAOQ,MAAP;AAAA,MAAeC,SAAf;;AAEA,SACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6SADJ,EAKI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,aADV;AAEI,IAAA,OAAO,EACH;AAAA,aAAMF,YAAY,8BAAKD,SAAL,IAAgBL,wBAAwB,EAAxC,GAAlB;AAAA,KAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAYQK,SAAS,CAACI,GAAV,CAAc,UAACJ,SAAD,EAAYK,KAAZ;AAAA,WACd,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAb;AAAoC,MAAA,GAAG,EAAED,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiDL,SAAjD,CADc;AAAA,GAAd,CAZR,EAgBI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,UADV;AAEI,IAAA,OAAO,EACH;AAAA,aAAMG,SAAS,CAACD,MAAM,GAAG,CAAV,CAAf;AAAA,KAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBJ,EAuBQ,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACI,MAAAA,SAAS,EAAE;AAAZ,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCJ,MAAtC,CAvBR,CADJ;AA4BH","sourcesContent":["import React, { useState } from \"react\";\r\nimport { ScrollView, Text, Button } from \"react-native\";\r\n\r\nconst girarDadosRandomicamente = () => Math.floor(Math.random() * 6) + 1\r\n\r\nexport function UseStateScreen() {\r\n    const [giroDados, setGiroDados] = useState([]);\r\n    const [contar, setContar] = useState(0);\r\n\r\n    return (\r\n        <ScrollView>\r\n            <Text>\r\n                O useState Hook tem como função retornar um valor e uma função para atualizar valores, já que pega o estado do objeto e o modifica durante o render.\r\n                O primeiro valor retornado nas re-renderizações será o retornado por setState, por ser o mais recente após os updates\r\n            </Text>\r\n            <Button \r\n                title='Girar Dados'\r\n                onPress={\r\n                    () => setGiroDados([...giroDados, girarDadosRandomicamente()])\r\n                }\r\n            />\r\n            {\r\n                giroDados.map((giroDados, index) => (\r\n                <Text style={{textAlign: 'center'}} key={index}>{giroDados}</Text>\r\n                ))\r\n            }\r\n            <Button\r\n                title='Contador'\r\n                onPress={\r\n                    () => setContar(contar + 1)\r\n                }\r\n            />\r\n            {\r\n                <Text style={{textAlign: 'center'}} >{contar}</Text>\r\n            }\r\n        </ScrollView>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}