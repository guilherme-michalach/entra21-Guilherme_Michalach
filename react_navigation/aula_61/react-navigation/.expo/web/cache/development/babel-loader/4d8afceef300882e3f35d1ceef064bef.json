{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\guilherme.michalach\\\\Desktop\\\\entra21-guilherme_michalach\\\\react_navigation\\\\aula_61\\\\react-navigation\\\\screens\\\\DrawerScreens\\\\UseRefScreen.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nexport function UseRefScreen() {\n  var intervaloRef = useRef();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setContar = _useState2[1];\n\n  useEffect(function () {\n    intervaloRef.current = setInterval(function () {\n      return setContar(function (count) {\n        return count + 1;\n      });\n    }, 1000);\n    return function () {\n      clearInterval(intervaloRef.current);\n    };\n  }, []);\n  var largura = useRef(new Animated.Value(0)).current;\n  var altura = useRef(new Animated.Value(1)).current;\n  var teste = [Animated.sequence([Animated.timing(largura, {\n    toValue: 250,\n    duration: 5000,\n    useNativeDriver: false\n  }), Animated.timing(altura, {\n    toValue: 250,\n    duration: 2500,\n    useNativeDriver: false\n  }), Animated.parallel([Animated.timing(altura, {\n    toValue: 1,\n    duration: 2500,\n    useNativeDriver: false\n  }), Animated.timing(largura, {\n    toValue: 0,\n    duration: 5000,\n    useNativeDriver: false\n  })])]).start()];\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"useRef retorna um objeto mut\\xE1vel/modificavel, ele precisa de .current nele para inicializar o argumento inicial. O objeto retornado persiste durante todo o ciclo de vida dele.\"), React.createElement(Text, {\n    style: {\n      fontSize: 120\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, count), React.createElement(Button, {\n    title: \"Stop\",\n    onPress: function onPress() {\n      clearInterval(intervaloRef.current);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      width: largura,\n      height: altura,\n      backgroundColor: '#524',\n      teste: teste\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/guilherme.michalach/Desktop/entra21-guilherme_michalach/react_navigation/aula_61/react-navigation/screens/DrawerScreens/UseRefScreen.js"],"names":["React","useState","useEffect","useRef","UseRefScreen","intervaloRef","count","setContar","current","setInterval","clearInterval","largura","Animated","Value","altura","teste","sequence","timing","toValue","duration","useNativeDriver","parallel","start","fontSize","width","height","backgroundColor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;;;;AAGA,OAAO,SAASC,YAAT,GAAwB;AAC3B,MAAMC,YAAY,GAAGF,MAAM,EAA3B;;AACA,kBAA2BF,QAAQ,CAAC,CAAD,CAAnC;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,SAAd;;AAEAL,EAAAA,SAAS,CAAC,YAAM;AACZG,IAAAA,YAAY,CAACG,OAAb,GAAuBC,WAAW,CAChC;AAAA,aAAMF,SAAS,CAAC,UAACD,KAAD;AAAA,eAAWA,KAAK,GAAG,CAAnB;AAAA,OAAD,CAAf;AAAA,KADgC,EAEhC,IAFgC,CAAlC;AAKA,WAAO,YAAM;AACXI,MAAAA,aAAa,CAACL,YAAY,CAACG,OAAd,CAAb;AACD,KAFD;AAGD,GATM,EASJ,EATI,CAAT;AAWE,MAAMG,OAAO,GAAGR,MAAM,CAAC,IAAIS,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BL,OAA9C;AACA,MAAMM,MAAM,GAAGX,MAAM,CAAC,IAAIS,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BL,OAA7C;AACA,MAAMO,KAAK,GAAI,CACXH,QAAQ,CAACI,QAAT,CAAkB,CACdJ,QAAQ,CAACK,MAAT,CACIN,OADJ,EAEI;AACIO,IAAAA,OAAO,EAAE,GADb;AAEIC,IAAAA,QAAQ,EAAE,IAFd;AAGIC,IAAAA,eAAe,EAAE;AAHrB,GAFJ,CADc,EASdR,QAAQ,CAACK,MAAT,CACIH,MADJ,EAEI;AACII,IAAAA,OAAO,EAAE,GADb;AAEIC,IAAAA,QAAQ,EAAE,IAFd;AAGIC,IAAAA,eAAe,EAAE;AAHrB,GAFJ,CATc,EAiBdR,QAAQ,CAACS,QAAT,CAAkB,CACdT,QAAQ,CAACK,MAAT,CACIH,MADJ,EAEI;AACAI,IAAAA,OAAO,EAAE,CADT;AAEAC,IAAAA,QAAQ,EAAE,IAFV;AAGAC,IAAAA,eAAe,EAAE;AAHjB,GAFJ,CADc,EAQdR,QAAQ,CAACK,MAAT,CACIN,OADJ,EAEI;AACIO,IAAAA,OAAO,EAAE,CADb;AAEIC,IAAAA,QAAQ,EAAE,IAFd;AAGIC,IAAAA,eAAe,EAAE;AAHrB,GAFJ,CARc,CAAlB,CAjBc,CAAlB,EAiCGE,KAjCH,EADW,CAAf;AAqCF,SACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0LADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCjB,KAAjC,CAFJ,EAGI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,MADV;AAEI,IAAA,OAAO,EAAE,mBAAM;AACfI,MAAAA,aAAa,CAACL,YAAY,CAACG,OAAd,CAAb;AACC,KAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EASI,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE;AAClBgB,MAAAA,KAAK,EAAEb,OADW;AAElBc,MAAAA,MAAM,EAAEX,MAFU;AAGlBY,MAAAA,eAAe,EAAE,MAHC;AAIlBX,MAAAA,KAAK,EAALA;AAJkB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADJ;AAkBH","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { ScrollView, Text, Button, Animated } from \"react-native\";\r\n\r\nexport function UseRefScreen() {\r\n    const intervaloRef = useRef();\r\n    const [count, setContar] = useState(0);\r\n\r\n    useEffect(() => {\r\n        intervaloRef.current = setInterval(\r\n          () => setContar((count) => count + 1),\r\n          1000\r\n        )\r\n    \r\n        return () => {\r\n          clearInterval(intervaloRef.current)\r\n        }\r\n      }, [])\r\n\r\n      const largura = useRef(new Animated.Value(0)).current;\r\n      const altura = useRef(new Animated.Value(1)).current;\r\n      const teste =  [\r\n          Animated.sequence([\r\n              Animated.timing(\r\n                  largura,\r\n                  {\r\n                      toValue: 250,\r\n                      duration: 5000,\r\n                      useNativeDriver: false\r\n                  }\r\n              ),\r\n              Animated.timing(\r\n                  altura,\r\n                  {\r\n                      toValue: 250,\r\n                      duration: 2500,\r\n                      useNativeDriver: false\r\n                  }\r\n              ),\r\n              Animated.parallel([\r\n                  Animated.timing(\r\n                      altura,\r\n                      {\r\n                      toValue: 1,\r\n                      duration: 2500,\r\n                      useNativeDriver: false\r\n                      }),\r\n                  Animated.timing(\r\n                      largura,\r\n                      {\r\n                          toValue: 0,\r\n                          duration: 5000,\r\n                          useNativeDriver: false\r\n                      })\r\n              ])\r\n          ]).start()\r\n      ];\r\n\r\n    return (\r\n        <ScrollView>\r\n            <Text>useRef retorna um objeto mut√°vel/modificavel, ele precisa de .current nele para inicializar o argumento inicial. O objeto retornado persiste durante todo o ciclo de vida dele.</Text>  \r\n            <Text style={{ fontSize: 120 }}>{count}</Text>\r\n            <Button\r\n                title=\"Stop\"\r\n                onPress={() => {\r\n                clearInterval(intervaloRef.current)\r\n                }}\r\n            />\r\n            <Animated.View style={{\r\n                width: largura,\r\n                height: altura,\r\n                backgroundColor: '#524',\r\n                teste\r\n            }} />\r\n        </ScrollView>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}