{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\guilherme.michalach\\\\Desktop\\\\entra21-guilherme_michalach\\\\react_navigation\\\\aula_61\\\\react-navigation\\\\screens\\\\DrawerScreens\\\\UseEffectScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nexport function UseEffectScreen() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      contar = _useState2[0],\n      setContar = _useState2[1];\n\n  var contarEm2 = Math.floor(contar / 2);\n  useEffect(function () {\n    console.log(\"Foram\" + contarEm2 * 2);\n  }, [contarEm2]);\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, \"useEffect precisa de 2 argumentos, callback e depend\\xEAncias. Assim, quando o componente funciona, a callback \\xE9 chamada se alguma depend\\xEAncia mudou desde a \\xFAltima vez que o componente rodou.\"), React.createElement(Button, {\n    title: 'Contar',\n    onPress: function onPress() {\n      return setContar(contar + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/guilherme.michalach/Desktop/entra21-guilherme_michalach/react_navigation/aula_61/react-navigation/screens/DrawerScreens/UseEffectScreen.js"],"names":["React","useState","useEffect","UseEffectScreen","contar","setContar","contarEm2","Math","floor","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAGA,OAAO,SAASC,eAAT,GAA2B;AAC9B,kBAA4BF,QAAQ,CAAC,CAAD,CAApC;AAAA;AAAA,MAAOG,MAAP;AAAA,MAAeC,SAAf;;AACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,MAAM,GAAG,CAApB,CAAlB;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACZO,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUJ,SAAS,GAAG,CAAlC;AACH,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIA,SACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gNADJ,EAII,oBAAC,MAAD;AACI,IAAA,KAAK,EAAE,QADX;AAEI,IAAA,OAAO,EAAE;AAAA,aACTD,SAAS,CAACD,MAAM,GAAG,CAAV,CADA;AAAA,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAaH","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ScrollView, Text, Button } from \"react-native\";\r\n\r\nexport function UseEffectScreen() {\r\n    const [contar, setContar] = useState(0)\r\n    const contarEm2 = Math.floor(contar / 2)\r\n\r\n    useEffect(() => {\r\n        console.log(`Foram` + contarEm2 * 2)\r\n    }, [contarEm2])\r\n\r\n    return (\r\n        <ScrollView>\r\n            <Text>\r\n                useEffect precisa de 2 argumentos, callback e dependências. Assim, quando o componente funciona, a callback é chamada se alguma dependência mudou desde a última vez que o componente rodou.\r\n            </Text>\r\n            <Button\r\n                title={'Contar'}\r\n                onPress={() =>\r\n                setContar(contar + 1)\r\n                }\r\n            />\r\n        </ScrollView>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}