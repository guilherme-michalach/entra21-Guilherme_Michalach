{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guilherme.michalach\\\\Desktop\\\\entra21-guilherme_michalach\\\\react_navigation\\\\aula_61\\\\react-navigation\\\\screens\\\\DrawerScreens\\\\UseContextScreen.js\";\nimport React from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nvar TesteContext = React.createContext();\nexport function UseContextScreen() {\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }\n  }, \"useContext aceita um objeto de contexto e retorna o valor atual dele, sendo esse valor atual definido pela prop value do MyContext. Primariamente usado quando alguns dados precisam ser acessados por v\\xE1rios componentes\"), React.createElement(TesteContext.Provider, {\n    value: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, React.createElement(Display, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }\n  })));\n}\n\nfunction Display() {\n  var _this = this;\n\n  return React.createElement(TesteContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, function (valor) {\n    return React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 19\n      }\n    }, \"A resposta \\xE9 \", valor, \".\");\n  });\n}","map":{"version":3,"sources":["C:/Users/guilherme.michalach/Desktop/entra21-guilherme_michalach/react_navigation/aula_61/react-navigation/screens/DrawerScreens/UseContextScreen.js"],"names":["React","TesteContext","createContext","UseContextScreen","Display","valor"],"mappings":";AAAA,OAAOA,KAAP,MAAwB,OAAxB;;;AAGA,IAAMC,YAAY,GAAGD,KAAK,CAACE,aAAN,EAArB;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAC/B,SACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oOADJ,EAKI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALJ,CADJ;AAWH;;AAED,SAASC,OAAT,GAAmB;AAAA;;AACf,SACE,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAC,KAAK;AAAA,WAAI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAoBA,KAApB,MAAJ;AAAA,GADR,CADF;AAKD","sourcesContent":["import React, {  } from \"react\";\r\nimport { ScrollView, Text } from \"react-native\";\r\n\r\nconst TesteContext = React.createContext();\r\n\r\nexport function UseContextScreen() {\r\n    return (\r\n        <ScrollView>\r\n            <Text>\r\n                useContext aceita um objeto de contexto e retorna o valor atual dele, sendo esse valor atual definido pela prop value do MyContext.\r\n                Primariamente usado quando alguns dados precisam ser acessados por vários componentes\r\n            </Text>\r\n            <TesteContext.Provider value={10}>\r\n                <Display />\r\n            </TesteContext.Provider>\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nfunction Display() {\r\n    return (\r\n      <TesteContext.Consumer>\r\n        {valor => <Text>A resposta é {valor}.</Text>}\r\n      </TesteContext.Consumer>\r\n    );\r\n  }"]},"metadata":{},"sourceType":"module"}